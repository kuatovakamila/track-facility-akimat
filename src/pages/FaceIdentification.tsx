import { useState, useCallback, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { motion } from "framer-motion";
import { Header } from "../components/Header";
import { VideoDisplay } from "../components/VideoDisplay";
import { useCamera } from "../lib/hooks/useCamera";
import toast from "react-hot-toast";
import { faceRecognitionService } from "../lib/services/faceRecognitionService";
import { ERROR_MESSAGES } from "../lib/constants";
import { FaRegSmileBeam, FaRegTimesCircle, FaFingerprint } from "react-icons/fa"; // ‚úÖ –ò–∫–æ–Ω–∫–∏ Face ID

export default function FaceIdentification() {
    const [isProcessing, setIsProcessing] = useState(false);
    const [error, setError] = useState<string | null>(null);
    const [consecutiveErrors, setConsecutiveErrors] = useState(0);
    const navigate = useNavigate();

    /** üìå –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ */
    const handleError = useCallback(
        (errorMessage: string) => {
            setError(errorMessage);
            setConsecutiveErrors((prev) => {
                const newCount = prev + 1;
                if (newCount >= 3) {
                    toast.error(`–û—à–∏–±–∫–∞: ${errorMessage}`, {
                        duration: 3000,
                        style: { background: "#272727", color: "#fff", borderRadius: "8px" },
                    });

                    setTimeout(() => navigate("/"), 1500); // ‚è≥ –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º
                }
                return newCount;
            });
        },
        [navigate]
    );

    /** üìå –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ–ø–æ—Ç–æ–∫–∞ */
    const handleFrame = useCallback(
        async (imageData: string) => {
            if (isProcessing) return;

            setIsProcessing(true);
            try {
                const data = await faceRecognitionService.verifyFace(imageData);

                if (data.matched) {
                    setConsecutiveErrors(0);
                    localStorage.setItem("faceId", data.faceId!);
                    navigate("/health-check");
                } else if (data.error === "No face detected in image") {
                    handleError(ERROR_MESSAGES.FACE_NOT_DETECTED);
                } else {
                    handleError(ERROR_MESSAGES.FACE_NOT_MATCHED);
                }
            } catch (err) {
                console.error("Error verifying face:", err);
                handleError(ERROR_MESSAGES.FACE_RECOGNITION_ERROR);
            } finally {
                setIsProcessing(false);
            }
        },
        [isProcessing, navigate, handleError]
    );

    /** üìå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã */
    const { videoRef, canvasRef, error: cameraError, loading } = useCamera({
        onFrame: handleFrame,
    });

    /** üìå –°–±—Ä–æ—Å –æ—à–∏–±–æ–∫ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ */
    useEffect(() => {
        setError(null);
        setConsecutiveErrors(0);
    }, []);

    /** üìå –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è */
    const errorMessage = loading
        ? "üì∑ –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∫–∞–º–µ—Ä–µ..."
        : isProcessing
        ? "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞..."
        : cameraError || error || "üì∏ –°–∫–∞–Ω–∏—Ä—É–π—Ç–µ —Å–≤–æ—ë –ª–∏—Ü–æ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è";

    /** üìå –í—ã–±–æ—Ä –∏–∫–æ–Ω–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è */
    const renderStatusIcon = () => {
        if (loading) return <FaFingerprint className="text-blue-400 text-6xl animate-pulse" />;
        if (isProcessing) return <FaFingerprint className="text-yellow-400 text-6xl animate-spin" />;
        if (error || cameraError) return <FaRegTimesCircle className="text-red-500 text-6xl" />;
        return <FaRegSmileBeam className="text-green-500 text-6xl" />;
    };

    return (
        <div className="min-h-screen bg-black text-white flex flex-col">
            <Header />

            <div className="flex-1 flex flex-col items-center justify-center p-6">
                <motion.h1
                    className="text-2xl font-medium mb-2"
                    initial={{ opacity: 0, y: -20 }}
                    animate={{ opacity: 1, y: 0 }}
                >
                    üèÜ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ª–∏—Ü–∞
                </motion.h1>

                {/* ‚úÖ –ê–Ω–∏–º–∞—Ü–∏—è Face ID */}
                <motion.div
                    className="mb-4"
                    initial={{ opacity: 0 }}
                    animate={{ opacity: 1 }}
                    transition={{ delay: 0.2 }}
                >
                    {renderStatusIcon()}
                </motion.div>

                <motion.p
                    className={`text-center text-gray-400 mb-8 ${isProcessing ? "text-yellow-400" : ""}`}
                    initial={{ opacity: 0 }}
                    animate={{ opacity: 1 }}
                    transition={{ delay: 0.2 }}
                >
                    {errorMessage}
                </motion.p>

                {/* ‚ùóÔ∏è –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –æ—à–∏–±–∫–∞—Ö */}
                {consecutiveErrors >= 2 && (
                    <motion.p
                        className="text-center text-red-500 mb-6"
                        initial={{ opacity: 0 }}
                        animate={{ opacity: 1 }}
                        transition={{ delay: 0.2 }}
                    >
                        ‚ö†Ô∏è –ù–µ—Å–∫–æ–ª—å–∫–æ –æ—à–∏–±–æ–∫ –ø–æ–¥—Ä—è–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –æ—Å–≤–µ—â–µ–Ω–∏–µ –∏–ª–∏ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –ª–∏—Ü–∞.
                    </motion.p>
                )}

                <VideoDisplay videoRef={videoRef} canvasRef={canvasRef} isProcessing={isProcessing} />
            </div>
        </div>
    );
}
