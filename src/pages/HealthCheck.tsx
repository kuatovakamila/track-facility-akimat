import { useHealthCheck } from "../lib/hooks/useHealthCheck";
import { useEffect, useState } from "react";
import { Header } from "../components/Header";
import { LoadingCircle } from "../components/LoadingCircle";
import { STATES } from "../lib/constants";
import { motion, AnimatePresence } from "framer-motion";

const MAX_STABILITY_TIME = 7;

export default function HealthCheck() {
    const {
        currentState,
        stabilityTime,
        temperatureData,
        alcoholData,
        sensorReady,
        secondsLeft,
        handleComplete,
    } = useHealthCheck();

    const state = STATES[currentState];

    // ‚úÖ –†–µ–∞–ª—Ç–∞–π–º-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è (—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ + –∞–ª–∫–æ–≥–æ–ª—å)
    const displayValue =
        currentState === "TEMPERATURE" && temperatureData.temperature !== undefined
            ? Number(temperatureData.temperature).toFixed(1) + "¬∞C"
            : currentState === "ALCOHOL" && alcoholData?.alcoholLevel
            ? alcoholData.alcoholLevel
            : "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö";

    // ‚úÖ –õ–æ–≥–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    useEffect(() => {
        console.log("üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:", temperatureData.temperature);
        console.log("üç∑ Alcohol Level:", alcoholData.alcoholLevel);
        console.log("üö¶ Sensor Ready:", sensorReady);
    }, [temperatureData.temperature, alcoholData.alcoholLevel, sensorReady]);

    // üÜï –õ–æ–∫–∞–ª—å–Ω—ã–π —Ç–∞–π–º–µ—Ä –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞
    const [countdown, setCountdown] = useState(secondsLeft);
    const [countdownStarted, setCountdownStarted] = useState(false);

    useEffect(() => {
        if (currentState === "ALCOHOL" && sensorReady && !countdownStarted) {
            setCountdownStarted(true);
            setCountdown(secondsLeft);

            const timer = setInterval(() => {
                setCountdown((prev) => {
                    if (prev > 0) return prev - 1;
                    clearInterval(timer);
                    return 0;
                });
            }, 1000);

            return () => clearInterval(timer);
        }
    }, [sensorReady, countdownStarted, currentState, secondsLeft]);

    return (
        <div className="min-h-screen bg-black text-white flex flex-col">
            <Header />
            <motion.div className="flex-1 flex flex-col items-center justify-center p-6">
                <AnimatePresence mode="wait">
                    <motion.div key={currentState} className="text-center">
                        {currentState === "ALCOHOL" && !sensorReady ? (
                            <>
                                <motion.h1 className="text-xl md:text-2xl font-medium mb-2">
                                    –û–∂–∏–¥–∞–Ω–∏–µ —Å–µ–Ω—Å–æ—Ä–∞...
                                </motion.h1>
                                <motion.p className="text-gray-400 mb-12">
                                    –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–µ –¥—É–π—Ç–µ, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –ø—Ä–æ–≥—Ä–µ–≤ –¥–∞—Ç—á–∏–∫–∞...
                                </motion.p>
                            </>
                        ) : (
                            <>
                                <motion.h1 className="text-xl md:text-2xl font-medium mb-2">
                                    {state.title}
                                </motion.h1>

                                {currentState === "ALCOHOL" && sensorReady && countdown > 0 ? (
                                    <motion.p className="text-lg text-yellow-400 mb-4">
                                        –û—Å—Ç–∞–ª–æ—Å—å {countdown} —Å–µ–∫—É–Ω–¥
                                    </motion.p>
                                ) : (
                                    <motion.p className="text-gray-400 mb-4">
                                        {currentState === "ALCOHOL"
                                            ? "–ü–æ–¥—É–π—Ç–µ 3-4 —Å–µ–∫—É–Ω–¥—ã"
                                            : state.subtitle}
                                    </motion.p>
                                )}
                            </>
                        )}
                    </motion.div>
                </AnimatePresence>

                {/* ‚úÖ –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –≤–Ω—É—Ç—Ä–∏ LoadingCircle, –ß–£–¢–¨ –ù–ò–ñ–ï –ò–ö–û–ù–ö–ò */}
                <div className="relative flex items-center justify-center">
                    <LoadingCircle
                        key={currentState}
                        icon={state.icon}
                        value={displayValue}
                        unit={state.unit}
                        progress={
                            currentState === "TEMPERATURE" && temperatureData.temperature !== undefined
                                ? (stabilityTime / MAX_STABILITY_TIME) * 100
                                : currentState === "ALCOHOL" && alcoholData.alcoholLevel !== "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"
                                ? 100
                                : 0
                        }
                        onComplete={handleComplete}
                    />
                    {/* ‚úÖ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —á—É—Ç—å –Ω–∏–∂–µ –∏–∫–æ–Ω–∫–∏ */}
                    <motion.p
                        className="absolute bottom-2 md:bottom-4 text-sm md:text-base font-medium text-white"
                        initial={{ opacity: 0 }}
                        animate={{ opacity: 1 }}
                        exit={{ opacity: 0 }}
                    >
                        {displayValue}
                    </motion.p>
                </div>
            </motion.div>
        </div>
    );
}
